// Generated by CoffeeScript 1.7.1
var $, $getJSON, $u, canvas, createElement, createFrameElement, ctx, data, drawLine, getCenter, getFrameNameInput, getFrameValue, getFrameValueInput, getParent, height, last, onInput, sortNear, updateScriptOutput, updateValue, width;

width = 960;

height = 500;

$ = function(q) {
  return document.querySelector(q);
};

canvas = document.getElementById("canvas");

ctx = canvas.getContext("2d");

createElement = function(html, className) {
  var elem, range;
  range = document.createRange();
  elem = range.createContextualFragment(html).firstChild;
  elem.classList.add(className);
  elem.setAttribute("pm_original", html);
  return elem;
};

$getJSON = function(url, success, error) {
  var request;
  if (error == null) {
    error = function(e) {
      return console.error(e);
    };
  }
  request = new XMLHttpRequest();
  request.open("GET", url, true);
  request.onload = function() {
    if (request.status < 200 || request.status >= 400) {
      error("unknown error");
      return;
    }
    return success(JSON.parse(request.responseText));
  };
  request.onerror = error;
  return request.send();
};

$u = function(query, className, html, position) {
  var elem, parent;
  if (position == null) {
    position = {
      x: 0,
      y: 0
    };
  }
  parent = $(query);
  if (!parent) {
    return console.error("" + query + " is not found");
  }
  elem = parent != null ? parent.querySelector("." + className) : void 0;
  if ((elem != null ? elem.getAttribute("pm_original") : void 0) === html) {
    return;
  }
  if (elem != null) {
    parent.removeChild(elem);
  }
  elem = createElement(html, className);
  elem.setAttribute("style", "left: " + position.x + "px; top: " + position.y + "px;");
  return parent.appendChild(elem);
};

getCenter = function(query, direction) {
  var e;
  if (direction == null) {
    direction = "left";
  }
  e = document.querySelector(query).getBoundingClientRect();
  return {
    x: direction === "left" ? e.left : e.right,
    y: e.top + e.height / 2
  };
};

sortNear = function(a, b, toPoint) {
  var r1, r2;
  r1 = Math.pow(toPoint.x - a.x, 2) + Math.pow(toPoint.y - a.y, 2);
  r2 = Math.pow(toPoint.x - b.x, 2) + Math.pow(toPoint.y - b.y, 2);
  if (r1 < r2) {
    return [a, b];
  } else {
    return [b, a];
  }
};

drawLine = function(from, to, lineWidth, strokeStyle) {
  var c, h, mid1, mid2, sign;
  if (lineWidth == null) {
    lineWidth = 2;
  }
  if (strokeStyle == null) {
    strokeStyle = "gray";
  }
  ctx.lineWidth = lineWidth;
  ctx.strokeStyle = strokeStyle;
  c = {
    x: (to.x + from.x) / 2,
    y: (to.y + from.y) / 2
  };
  h = Math.min(Math.abs(to.x - from.x), Math.abs(to.y - from.y)) / 2;
  sign = function(a) {
    return a / Math.abs(a);
  };
  mid1 = {
    x: c.x - h * sign(c.x - from.x),
    y: c.y - h * sign(c.y - from.y)
  };
  mid2 = {
    x: c.x + h * sign(to.x - c.x),
    y: c.y + h * sign(to.y - c.y)
  };
  ctx.beginPath();
  ctx.moveTo(from.x, from.y);
  ctx.lineTo(mid1.x, mid1.y);
  ctx.lineTo(mid2.x, mid2.y);
  ctx.lineTo(to.x, to.y);
  return ctx.stroke();
};

last = function(arr) {
  return arr[arr.length - 1];
};

updateScriptOutput = function(frame) {
  var isEmpty, out, outId, param1, param2;
  if (frame == null) {
    return;
  }
  isEmpty = function(str) {
    if (str == null) {
      return true;
    }
    return str.length === 0;
  };
  if (frame.script == null) {
    return;
  }
  param1 = getFrameValue(frame.subframes[0].id);
  param2 = getFrameValue(frame.subframes[1].id);
  if (isEmpty(param1.length) || isEmpty(param2)) {
    return;
  }
  out = eval("(" + frame.script + ")(" + param1 + ", " + param2 + ")");
  outId = last(frame.subframes).id;
  return updateValue(outId, out);
};

updateValue = function(id, value) {
  var input, oldValue;
  if (id == null) {
    return;
  }
  input = getFrameValueInput(id);
  oldValue = Number(input.value);
  if (Number(value !== oldValue)) {
    input.value = value;
    return onInput(getFrameValueInput(id));
  }
};

onInput = function(input) {
  var destId, id, type;
  id = input.getAttribute("frame-id");
  type = input.getAttribute("class");
  if (type !== "value") {
    return;
  }
  destId = data.edges[id];
  updateValue(destId, input.value);
  return updateScriptOutput(getParent(id));
};

getFrameNameInput = function(id) {
  return $(".frame-" + id + " input.name");
};

getFrameValueInput = function(id) {
  return $(".frame-" + id + " input.value");
};

getFrameValue = function(id) {
  return getFrameValueInput(id).value;
};

getParent = function(id) {
  var frame, subframe, _i, _j, _len, _len1, _ref, _ref1, _ref2;
  _ref = data.frames;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    frame = _ref[_i];
    _ref2 = (_ref1 = frame.subframes) != null ? _ref1 : [];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      subframe = _ref2[_j];
      if (Number(subframe.id === Number(id))) {
        return frame;
      }
    }
  }
  return null;
};

createFrameElement = function(frame) {
  var children, onInputStr, subframe, _ref;
  onInputStr = "(function(input){onInput(input)})(this)";
  children = (function() {
    var _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    _ref1 = (_ref = frame.subframes) != null ? _ref : [frame];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      subframe = _ref1[_i];
      _results.push("<div class=\"inner-frame frame-" + subframe.id + " extern-" + ((_ref2 = subframe.extern) != null ? _ref2 : "none") + "\">\n  <div class=\"arrow in\"></div>\n  <div class=\"arrow out\"></div>\n  <input type=\"text\" frame-id=\"" + subframe.id + "\" value=\"" + ((_ref3 = subframe.name) != null ? _ref3 : "") + "\" class=\"name\" oninput=\"" + onInputStr + "\">\n  <input type=\"text\" frame-id=\"" + subframe.id + "\" value=\"" + ((_ref4 = subframe.value) != null ? _ref4 : "") + "\" class=\"value\" oninput=\"" + onInputStr + "\">\n</div>");
    }
    return _results;
  })();
  return "<div class=\"frame\">\n  <input type=\"text\" value=\"" + ((_ref = frame.name) != null ? _ref : "") + "\" class=\"name\">\n  <div class=\"subframes\">\n    " + (children.join("\n")) + "\n  </div>\n</div>";
};

data = {};

$getJSON("source.json", function(json) {
  var frame, updateLines, _i, _len, _ref;
  data = json;
  _ref = json.frames;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    frame = _ref[_i];
    $u("#machine", "frame-" + frame.id, createFrameElement(frame), json.layout[frame.id]);
  }
  updateLines = function() {
    var canvasRect, from, key, to, value, _ref1, _results;
    canvasRect = canvas.getBoundingClientRect();
    ctx.clearRect(0, 0, canvasRect.width, canvasRect.height);
    _ref1 = json.edges;
    _results = [];
    for (key in _ref1) {
      value = _ref1[key];
      from = getCenter(".frame-" + key, "right");
      to = getCenter(".frame-" + value, "left");
      _results.push(drawLine(from, to, 1));
    }
    return _results;
  };
  updateLines();
  return setInterval(updateLines, 100);
});
